package ioio.examples.hello;

//A program to run two motors at 80% power on an IOIO board

//import ioio packages
import java.util.List;
import ioio.lib.api.DigitalOutput;
import ioio.lib.api.exception.ConnectionLostException;
import ioio.lib.util.BaseIOIOLooper;
import ioio.lib.util.IOIOLooper;
import ioio.lib.util.android.IOIOActivity;
import android.os.Bundle;
import android.widget.ToggleButton;
import ioio.lib.api.*;

public class MainActivity extends IOIOActivity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		
	}

	
	class Looper extends BaseIOIOLooper {
		/*Declare variables*/
		private PwmOutput pwmB;
		private PwmOutput pwmA;
		private DigitalOutput Binone;
		private DigitalOutput Bintwo;
		private DigitalOutput Ainone;
		private DigitalOutput Aintwo;
		private DigitalOutput standby;
		private DigitalOutput Vcc;
		private DigitalOutput gnd;
		private DigitalOutput Vm;

		
		@Override
		protected void setup() throws ConnectionLostException {
			//allocate pins
			pwmA = ioio_.openPwmOutput(39, 100000);
			pwmB = ioio_.openPwmOutput(45, 100000);
			Binone = ioio_.openDigitalOutput(43);
			Bintwo = ioio_.openDigitalOutput(44);
			Ainone = ioio_.openDigitalOutput(41);
			Aintwo = ioio_.openDigitalOutput(40);
			standby = ioio_.openDigitalOutput(42);
			gnd = ioio_.openDigitalOutput(46);

		/**
		 * Called repetitively while the IOIO is connected.
		 * 
		 * @throws ConnectionLostException
		 *             When IOIO connection is lost.
		 * 
		 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#loop()
		 */
		@Override
		public void loop() throws ConnectionLostException {
			
				//set pins
				pwmA.setDutyCycle((float)0.8);
				pwmB.setDutyCycle((float)0.8);
				Binone.write(true);
				Bintwo.write(false);
				Ainone.write(true);
				Aintwo.write(false);
				standby.write(true);
				Vcc.write(true);
				gnd.write(false);
				Vm.write(true);

				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
				}	
			
		}
	}

	/**
	 * A method to create our IOIO thread.
	 * 
	 * @see ioio.lib.util.AbstractIOIOActivity#createIOIOThread()
	 */
	@Override
	protected IOIOLooper createIOIOLooper() {
		return new Looper();
	}
}
